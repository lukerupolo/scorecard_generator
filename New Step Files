# steps/step_0_api_key.py
import streamlit as st

def render():
    st.header("Step 0: Enter Your OpenAI API Key")
    with st.form("api_key_form"):
        api_key_input = st.text_input("üîë OpenAI API Key", type="password")
        if st.form_submit_button("Submit API Key"):
            if api_key_input:
                st.session_state.openai_api_key = api_key_input
                st.session_state.api_key_entered = True
                st.rerun()
            else:
                st.error("Please enter a valid OpenAI API key.")

# steps/step_1_metric_selection.py
import streamlit as st

def render():
    st.header("Step 1: Metric Selection")

    if 'current_metrics' not in st.session_state:
        st.session_state.current_metrics = ["Video views (Franchise)", "Social Impressions"]

    st.info("Select metrics from the dropdown, or add your own below. Press Enter to add a custom metric.")
    
    predefined_metrics = [
        "Video views (Franchise)", "Social Impressions", "Press UMV (unique monthly views)",
        "Social Conversation Volume", "Views trailer", "UGC Views", 
        "Social Impressions-Posts with trailer (FB, IG, X)", "Social Impressions-All posts",
        "Nb. press articles", "Social Sentiment (Franchise)", "Trailer avg % viewed (Youtube)",
        "Email Open Rate (OR)", "Email Click Through Rate (CTR)", "Labs program sign-ups",
        "Discord channel sign-ups", "% Trailer views from Discord (Youtube)",
        "Labs sign up click-through Web", "Sessions", "DAU", "Hours Watched (Streams)"
    ]

    all_possible_metrics = sorted(list(set(predefined_metrics + st.session_state.current_metrics)))

    def update_selections():
        st.session_state.current_metrics = st.session_state.multiselect_key

    st.multiselect(
        "Select metrics:", 
        options=all_possible_metrics, 
        default=st.session_state.current_metrics,
        key="multiselect_key",
        on_change=update_selections
    )
    
    def add_custom_metric():
        custom_metric = st.session_state.custom_metric_input.strip()
        if custom_metric and custom_metric not in st.session_state.current_metrics:
            st.session_state.current_metrics.append(custom_metric)
        st.session_state.custom_metric_input = ""

    st.text_input(
        "‚úçÔ∏è Add Custom Metric (and press Enter)", 
        key="custom_metric_input", 
        on_change=add_custom_metric
    )

    st.markdown("---")

    if st.button("Confirm Metrics & Proceed ‚Üí", type="primary"):
        if not st.session_state.current_metrics:
            st.error("Please select at least one metric.")
        else:
            st.session_state.metrics = st.session_state.current_metrics
            st.session_state.metrics_confirmed = True
            del st.session_state.current_metrics
            st.rerun()

# steps/step_2_benchmark_strategy.py
import streamlit as st
from strategy import define_comparable_profile

def render():
    st.header("Step 2: Define a Comparable Event Profile")
    st.info("To ensure your benchmarks are meaningful, first profile your current event. This will help you select truly comparable past events in the next step.")

    with st.form("strategy_form"):
        st.subheader("Please profile your current event:")
        objective = st.selectbox(
            "Primary Objective: What is the single most important goal?",
            options=["Brand Awareness / Reach", "Audience Engagement / Depth", "Conversion / Action"],
            help="Select the goal that best describes what you want to achieve."
        )
        scale = st.selectbox(
            "Campaign Scale & Investment: What is the relative size and budget?",
            options=["Major", "Standard", "Niche"],
            help="""
            - **Major**: A huge, top-tier event (e.g., a full game launch).
            - **Standard**: A significant, but not massive, marketing beat (e.g., a new season).
            - **Niche**: A smaller, focused effort (e.g., a creator campaign).
            """
        )
        audience = st.selectbox(
            "Target Audience: Who are you trying to reach?",
            options=["New Customer Acquisition", "Existing Customer Re-engagement"],
            help="Are you primarily trying to reach new people or re-engage your existing fans?"
        )

        submitted = st.form_submit_button("Define Profile & Proceed ‚Üí", type="primary")
        if submitted:
            st.session_state.strategy_profile = define_comparable_profile(objective, scale, audience)
            st.session_state.comparability_analysis_complete = True
            st.rerun()

# steps/step_3_benchmark_calculation.py
import streamlit as st
import pandas as pd
from data_processing import calculate_all_benchmarks

def render():
    st.header("Step 3: Benchmark Calculation (Optional)")
    
    # Display the strategy profile defined in the previous step
    if st.session_state.strategy_profile:
        with st.container(border=True):
            st.subheader("Your Recommended Profile for Comparable Events")
            st.markdown(f"**_{st.session_state.strategy_profile['ideal_profile_description']}_**")
            st.markdown("---")
            st.markdown("**How to Choose Your Past Events (Comparison Hierarchy):**")
            for note in st.session_state.strategy_profile['guidance_notes']:
                st.markdown(f"**{note['title']}**: {note['text']}")
    st.markdown("---")

    benchmark_choice = st.radio(
        "Would you like to calculate proposed benchmark values using historical data?",
        ("No, I will enter benchmarks manually later.", "Yes, calculate benchmarks from past events."),
        key="benchmark_choice_radio"
    )

    if benchmark_choice == "Yes, calculate benchmarks from past events.":
        with st.form("benchmark_data_form"):
            st.info("For each metric, provide its 3-month average, then enter the Baseline and Actual values from past events that MATCH the profile defined above.")
            
            historical_inputs = {}
            for metric in st.session_state.metrics:
                st.markdown(f"--- \n #### Data for: **{metric}**")
                
                three_month_avg = st.number_input(f"3-Month Average for '{metric}'", min_value=0.0, format="%.2f", key=f"3m_avg_{metric}")
                df_template = pd.DataFrame([{"Event Name": "Past Event 1", "Baseline (7-day)": None, "Actual (7-day)": None}])
                edited_df = st.data_editor(df_template, key=f"hist_editor_{metric}", num_rows="dynamic", use_container_width=True)
                
                historical_inputs[metric] = {"historical_df": edited_df, "three_month_avg": three_month_avg}

            if st.form_submit_button("Calculate All Proposed Benchmarks & Proceed ‚Üí", type="primary"):
                with st.spinner("Analyzing historical data..."):
                    summary_df, proposed, actuals = calculate_all_benchmarks(historical_inputs)
                    st.session_state.benchmark_df = summary_df
                    st.session_state.proposed_benchmarks = proposed
                    st.session_state.avg_actuals = actuals
                    st.session_state.benchmark_flow_complete = True
                st.rerun()
    else:
        if st.button("Proceed to Scorecard Creation ‚Üí", type="primary"):
            st.session_state.benchmark_flow_complete = True
            st.rerun()

# steps/step_4_build_moments.py
import streamlit as st
import pandas as pd
from data_processing import process_scorecard_data

def render():
    st.header("Step 4: Build & Save Scorecard Moments")
    
    app_config = {
        'openai_api_key': st.session_state.openai_api_key, 
        'metrics': st.session_state.metrics,
        'proposed_benchmarks': st.session_state.get('proposed_benchmarks'),
        'avg_actuals': st.session_state.get('avg_actuals')
    }
    
    if st.session_state.sheets_dict is None:
        st.session_state.sheets_dict = process_scorecard_data(app_config)

    st.info("Fill in the 'Actuals' and 'Benchmark' columns, give the scorecard a name, and save it as a 'moment'. You can create multiple moments.")
    
    current_scorecard_df = next(iter(st.session_state.sheets_dict.values()), None)

    if current_scorecard_df is not None:
        edited_df = st.data_editor(current_scorecard_df, key="moment_editor", use_container_width=True, num_rows="dynamic")
        
        edited_df['Actuals'] = pd.to_numeric(edited_df['Actuals'], errors='coerce')
        edited_df['Benchmark'] = pd.to_numeric(edited_df['Benchmark'], errors='coerce')
        edited_df['% Difference'] = ((edited_df['Actuals'] - edited_df['Benchmark']) / edited_df['Benchmark'].replace(0, pd.NA)).apply(lambda x: f"{x:.1%}" if pd.notna(x) else None)
        
        col1, col2 = st.columns([3, 1])
        moment_name = col1.text_input("Name for this Scorecard Moment", placeholder="e.g., Pre-Reveal, Launch Week")
        
        if col2.button("üíæ Save Moment", use_container_width=True, type="primary"):
            if moment_name:
                st.session_state.saved_moments[moment_name] = edited_df
                st.success(f"Saved moment: '{moment_name}'")
                st.session_state.sheets_dict = None # Clear editor for next moment
                st.rerun()
            else:
                st.error("Please enter a name for the moment before saving.")

    if st.session_state.saved_moments:
        st.markdown("---")
        st.subheader("Saved Scorecard Moments")
        if st.session_state.benchmark_df is not None and not st.session_state.benchmark_df.empty:
            with st.expander("View Benchmark Calculation Summary"):
                st.dataframe(st.session_state.benchmark_df.set_index("Metric"), use_container_width=True)
        
        for name, df in st.session_state.saved_moments.items():
            with st.expander(f"View Moment: {name}"):
                st.dataframe(df, use_container_width=True)
        st.session_state.show_ppt_creator = True

# steps/step_5_create_presentation.py
import streamlit as st
from style import STYLE_PRESETS
from powerpoint import create_presentation

def render():
    if not st.session_state.get('show_ppt_creator'):
        return

    st.markdown("---")
    st.header("Step 5: Create Presentation")
    
    if st.session_state.get("presentation_buffer"):
        st.download_button(
            label="‚úÖ Download Your Presentation!", 
            data=st.session_state.presentation_buffer, 
            file_name="game_scorecard_presentation.pptx", 
            use_container_width=True
        )

    with st.form("ppt_form"):
        st.subheader("Presentation Style & Details")
        
        if st.session_state.saved_moments:
            options = list(st.session_state.saved_moments.keys())
            selected_moments = st.multiselect(
                "Select which saved moments to include in the presentation:",
                options=options,
                default=options
            )
        else:
            st.warning("No scorecard moments saved yet. Please save at least one moment above.")
            selected_moments = []

        col1, col2 = st.columns(2)
        style_name = col1.radio("Select Style Preset:", options=list(STYLE_PRESETS.keys()), horizontal=True)
        region_prompt = col2.text_input("Region for AI Background Image", "Brazil")
        ppt_title = st.text_input("Presentation Title", "Game Scorecard")
        ppt_subtitle = st.text_input("Presentation Subtitle", "A detailed analysis")
        
        submitted = st.form_submit_button("Generate Presentation", use_container_width=True)

        if submitted:
            if not selected_moments:
                st.error("Please select at least one saved moment to include.")
            else:
                with st.spinner(f"Building presentation with {style_name} style..."):
                    data = {name: st.session_state.saved_moments[name] for name in selected_moments}
                    style = STYLE_PRESETS[style_name]
                    buffer = create_presentation(
                        title=ppt_title,
                        subtitle=ppt_subtitle,
                        scorecard_moments=selected_moments,
                        sheets_dict=data,
                        style_guide=style,
                        region_prompt=region_prompt,
                        openai_api_key=st.session_state.openai_api_key 
                    )
                    st.session_state["presentation_buffer"] = buffer
                    st.rerun()
